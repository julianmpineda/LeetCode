/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        int carry = 0;

        ListNode answerhead = new ListNode();
        ListNode head = answerhead;
                
        // Both numbers still have digits
        while (l1 != null && l2 != null) {
            
            ListNode runner = new ListNode();
            int answer = l1.val + l2.val + carry;
            
            if (answer >= 10) {
                carry = 1;
                runner.val = answer - 10;
            } else {
                runner.val = answer;
                carry = 0;
            }
            l1 = l1.next;
            l2 = l2.next;
            answerhead.next = runner;
            answerhead = answerhead.next;
        }
        
        // First number has more digits but the second doesn't
        while (l1 != null && l2 == null) {
            ListNode runner = new ListNode();
            int answer = l1.val + carry;
            if (answer >= 10) {
                carry = 1;
                runner.val = answer - 10;
            } else {
                runner.val = answer;
                carry = 0;
            }
            l1 = l1.next;
            answerhead.next = runner;
            answerhead = answerhead.next;
        }
        
        // First number has no more digits but second does
        while (l1 == null && l2 != null) {
            ListNode runner = new ListNode();
            int answer = l2.val + carry;
            if (answer >= 10) {
                carry = 1;
                runner.val = answer - 10;
            } else {
                runner.val = answer;
                carry = 0;
            }
            l2 = l2.next;
            answerhead.next = runner;
            answerhead = answerhead.next;
        }
        
        // If the final digit has a carry
        if (carry == 1) {
            ListNode runner = new ListNode();
            runner.val = 1;
            answerhead.next = runner;
        }
        
        return head.next;
    }
}
