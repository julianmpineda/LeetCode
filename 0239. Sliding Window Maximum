class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {

        if (nums.length == 1) {
            return nums;
        }

        int start = 0, end = k - 1;
        List<Integer> winMax = new ArrayList<Integer>();

        int[] firstMax = findMax(nums, k, start, end);
        int tempMax = firstMax[0];
        int maxInd = firstMax[1];

        //winMax.add(tempMax);

        while (end < nums.length) {

            if (maxInd < start) {
                int[] tempSave = findMax(nums, k, start, end);
                tempMax = tempSave[0];
                maxInd = tempSave[1];
                winMax.add(tempMax);
            } else {
                tempMax = Math.max(Math.max(tempMax, nums[start]), nums[end]);
                winMax.add(tempMax);
            }
            start++;
            end++;
        } 

        int[] maxList = new int[winMax.size()];

        for (int j = 0; j < winMax.size(); j++) {
            maxList[j] = winMax.get(j);
        }

        return maxList;
    }

    public static int[] findMax(int[] nums, int k, int start, int end) {

        int maxInd = 0, tempSave = 0, tempMax = Integer.MIN_VALUE;

        for (int i = start; i <= end; i++) {
            tempSave = tempMax;
            tempMax = Math.max(nums[i], tempMax);
            if (tempSave != tempMax) {
                maxInd = i;
            }
        }
        //System.out.println("New Max is " + tempMax + " with maxInd " + maxInd + "\n");
        return new int[]{tempMax, maxInd};
    }
}
