class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        List<int[]> mergedIntervals = new ArrayList<int[]>();
        int start = 0, end = 0, count = 0;
        int[] temp = new int[]{-1,-1};
        boolean found = false;

        if (intervals.length == 0) {
            return new int[][]{newInterval};
        }
        
        for (int i = 0; i < intervals.length; i++) {
            if (newInterval[0] >= intervals[i][0] && newInterval[0] <= intervals[i][1]) {
                temp[0] = Math.min(intervals[i][0], newInterval[0]);
                start = i;
            }
            if (newInterval[1] >= intervals[i][0] && newInterval[1] <= intervals[i][1]) {
                temp[1] = Math.max(intervals[i][1], newInterval[1]);
                end = i;
            }
        }

        if (temp[0] == -1 || temp[1] == -1) {
            int j = 0;
            while (j < intervals.length && !found) {
                if (newInterval[0] >= intervals[j][1] && newInterval[1] <= intervals[j+1][0]) {
                    start = j;
                    end = j+1;
                    found = true;
                    temp[0] = Math.max(temp[0], newInterval[0]);
                    temp[1] = Math.max(temp[1], newInterval[1]);
                }
            }
        }

        for (int k = 0; k < intervals.length; k++) {
            if (found && k == start) {
                    mergedIntervals.add(intervals[k]);
                    mergedIntervals.add(newInterval);
                    found = false;
            } else if (k == start) {
                mergedIntervals.add(temp);
                System.out.println("temp added");
            } else if (k > start && k <= end) {
                //Do nothing, don't add intervals to list
                System.out.println("do nothing");
            } else if (k != start) {
                mergedIntervals.add(intervals[k]);  
                System.out.println("k int added");
            } 
        }

        int[][] returnIntervals = new int[mergedIntervals.size()][2];
        for (int l = 0; l < mergedIntervals.size(); l++) {
            returnIntervals[l] = mergedIntervals.get(l);
        }

        System.out.println("start " + start + ", end " + end);
        System.out.println("temp [" + temp[0] + ", " + temp[1] + "]");

        return returnIntervals;
    }
} 
