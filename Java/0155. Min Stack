/*
  Wanted to implement it without using the stack,
  but arrayList might be cheating since it's based on
  stack. Adds some stuff like min and end, though end is just
  a way to not have to call the length function all the time.

  When something is pushed, stores the old min value along side 
  it, then when something is popped, it replaces the min value.
  Stack elements can have the same secondary value and it can
  also be the same as the min value.
*/

class MinStack {
    private int end, min;
    private List<int[]> stack;

    public MinStack() {
        this.stack = new ArrayList<int[]>();
        end = -1;
        min = Integer.MAX_VALUE;
    }
    
    public void push(int val) {
        stack.add(new int[]{val, min});
        min = Math.min(val, min);
        end++;
    }
    
    public void pop() {
        min = stack.get(end)[1];
        stack.remove(end);
        end--;
    }
    
    public int top() {
        return stack.get(end)[0];
    }
    
    public int getMin() {
        return min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
